#!/usr/bin/env python3\n\"\"\"\nAIMEX 기본 시드 데이터 생성 스크립트\n\nSOLID 원칙:\n- SRP: 시드 데이터 생성만 담당\n- OCP: 새로운 데이터 타입 추가 시 확장 가능\n- DIP: 구체적인 DB 구현이 아닌 추상화된 모델에 의존\n\nClean Architecture:\n- 도메인 계층의 엔티티를 사용하여 데이터 생성\n- 인프라 계층의 데이터베이스 세션을 통해 저장\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# 프로젝트 루트 경로 추가\nproject_root = Path(__file__).parent / \"backend\"\nsys.path.insert(0, str(project_root))\n\ntry:\n    from app.database import SessionLocal, test_database_connection\n    from app.models.influencer import ModelMBTI, StylePreset\n    from app.models.user import Team\n    from sqlalchemy.exc import IntegrityError\n    import uuid\n    \n    def create_seed_data():\n        \"\"\"\n        기본 시드 데이터 생성\n        \n        Clean Architecture:\n        - Application Layer: 비즈니스 로직 조율\n        - Domain Layer: 엔티티 및 도메인 규칙\n        - Infrastructure Layer: 데이터베이스 접근\n        \"\"\"\n        print(\"🌱 AIMEX 시드 데이터 생성 시작...\")\n        \n        # 데이터베이스 연결 확인\n        if not test_database_connection():\n            print(\"❌ 데이터베이스 연결 실패\")\n            print(\"   - MySQL 서버가 실행 중인지 확인하세요\")\n            print(\"   - 데이터베이스 연결 정보를 확인하세요\")\n            return False\n        \n        db = SessionLocal()\n        try:\n            # 1. 기본 팀 생성 (team_id = 0: 관리자 그룹)\n            print(\"\\n1. 기본 팀 데이터 생성...\")\n            existing_admin_team = db.query(Team).filter(Team.team_id == 0).first()\n            if not existing_admin_team:\n                admin_team = Team(\n                    team_id=0,\n                    team_name=\"관리자\",\n                    team_description=\"시스템 관리자 전용 팀\"\n                )\n                db.add(admin_team)\n                print(\"   ✅ 관리자 팀 생성\")\n            else:\n                print(\"   ℹ️  관리자 팀 이미 존재\")\n                \n            # 기본 개발팀 생성\n            existing_dev_team = db.query(Team).filter(Team.team_name == \"개발팀\").first()\n            if not existing_dev_team:\n                dev_team = Team(\n                    team_name=\"개발팀\",\n                    team_description=\"AIMEX 개발팀\"\n                )\n                db.add(dev_team)\n                print(\"   ✅ 개발팀 생성\")\n            else:\n                print(\"   ℹ️  개발팀 이미 존재\")\n            \n            # 2. MBTI 데이터 생성\n            print(\"\\n2. MBTI 성격 유형 데이터 생성...\")\n            mbti_data = [\n                {\n                    \"mbti_name\": \"INTJ\",\n                    \"mbti_trait\": \"전략가형. 독립적이고 창의적이며 미래지향적인 사고를 가집니다.\",\n                    \"mbti_speech\": \"논리적이고 체계적인 말투를 사용하며, 간결하고 명확한 표현을 선호합니다.\"\n                },\n                {\n                    \"mbti_name\": \"ENFP\",\n                    \"mbti_trait\": \"활동가형. 열정적이고 창의적이며 사람들과의 관계를 중시합니다.\",\n                    \"mbti_speech\": \"활기차고 친근한 말투를 사용하며, 감정이 풍부한 표현을 좋아합니다.\"\n                },\n                {\n                    \"mbti_name\": \"ISFJ\",\n                    \"mbti_trait\": \"수호자형. 따뜻하고 배려심이 많으며 책임감이 강합니다.\",\n                    \"mbti_speech\": \"부드럽고 정중한 말투를 사용하며, 상대방을 배려하는 표현을 선호합니다.\"\n                },\n                {\n                    \"mbti_name\": \"ESTP\",\n                    \"mbti_trait\": \"사업가형. 활동적이고 현실적이며 즉흥적인 결정을 잘 내립니다.\",\n                    \"mbti_speech\": \"직설적이고 에너지 넘치는 말투를 사용하며, 재미있는 표현을 좋아합니다.\"\n                },\n                {\n                    \"mbti_name\": \"INFP\",\n                    \"mbti_trait\": \"중재자형. 이상주의적이고 창의적이며 개인의 가치를 중시합니다.\",\n                    \"mbti_speech\": \"감성적이고 진실한 말투를 사용하며, 은유적인 표현을 즐겨 사용합니다.\"\n                }\n            ]\n            \n            for mbti_info in mbti_data:\n                existing_mbti = db.query(ModelMBTI).filter(\n                    ModelMBTI.mbti_name == mbti_info[\"mbti_name\"]\n                ).first()\n                \n                if not existing_mbti:\n                    mbti = ModelMBTI(\n                        mbti_name=mbti_info[\"mbti_name\"],\n                        mbti_trait=mbti_info[\"mbti_trait\"],\n                        mbti_speech=mbti_info[\"mbti_speech\"]\n                    )\n                    db.add(mbti)\n                    print(f\"   ✅ {mbti_info['mbti_name']} MBTI 생성\")\n                else:\n                    print(f\"   ℹ️  {mbti_info['mbti_name']} MBTI 이미 존재\")\n            \n            # 3. 기본 스타일 프리셋 생성\n            print(\"\\n3. 기본 스타일 프리셋 데이터 생성...\")\n            preset_data = [\n                {\n                    \"style_preset_name\": \"친근한 20대 여성\",\n                    \"influencer_type\": 0,  # 인간\n                    \"influencer_gender\": 1,  # 여성\n                    \"influencer_age_group\": \"20대\",\n                    \"influencer_hairstyle\": \"긴 웨이브 헤어\",\n                    \"influencer_mood\": \"밝고 친근한 분위기\",\n                    \"influencer_personality\": \"밝고 긍정적이며 사람들과 소통하는 것을 좋아합니다.\",\n                    \"influencer_speech\": \"친근하고 다정한 말투로 이모티콘을 자주 사용합니다.\"\n                },\n                {\n                    \"style_preset_name\": \"전문적인 30대 남성\",\n                    \"influencer_type\": 0,  # 인간\n                    \"influencer_gender\": 0,  # 남성\n                    \"influencer_age_group\": \"30대\",\n                    \"influencer_hairstyle\": \"짧고 정돈된 헤어\",\n                    \"influencer_mood\": \"신뢰감 있고 전문적인 분위기\",\n                    \"influencer_personality\": \"신뢰할 수 있고 전문적이며 논리적인 사고를 가지고 있습니다.\",\n                    \"influencer_speech\": \"정중하고 명확한 말투로 전문 용어를 적절히 사용합니다.\"\n                },\n                {\n                    \"style_preset_name\": \"트렌디한 10대 여성\",\n                    \"influencer_type\": 0,  # 인간\n                    \"influencer_gender\": 1,  # 여성\n                    \"influencer_age_group\": \"10대\",\n                    \"influencer_hairstyle\": \"숏커트 보브\",\n                    \"influencer_mood\": \"트렌디하고 활기찬 분위기\",\n                    \"influencer_personality\": \"트렌드에 민감하고 활발하며 새로운 것을 좋아합니다.\",\n                    \"influencer_speech\": \"젊고 활기찬 말투로 유행어와 신조어를 사용합니다.\"\n                }\n            ]\n            \n            for preset_info in preset_data:\n                existing_preset = db.query(StylePreset).filter(\n                    StylePreset.style_preset_name == preset_info[\"style_preset_name\"]\n                ).first()\n                \n                if not existing_preset:\n                    preset = StylePreset(\n                        style_preset_id=str(uuid.uuid4()),\n                        style_preset_name=preset_info[\"style_preset_name\"],\n                        influencer_type=preset_info[\"influencer_type\"],\n                        influencer_gender=preset_info[\"influencer_gender\"],\n                        influencer_age_group=preset_info[\"influencer_age_group\"],\n                        influencer_hairstyle=preset_info[\"influencer_hairstyle\"],\n                        influencer_mood=preset_info[\"influencer_mood\"],\n                        influencer_personality=preset_info[\"influencer_personality\"],\n                        influencer_speech=preset_info[\"influencer_speech\"]\n                    )\n                    db.add(preset)\n                    print(f\"   ✅ '{preset_info['style_preset_name']}' 프리셋 생성\")\n                else:\n                    print(f\"   ℹ️  '{preset_info['style_preset_name']}' 프리셋 이미 존재\")\n            \n            # 변경사항 커밋\n            db.commit()\n            print(\"\\n🎉 시드 데이터 생성 완료!\")\n            print(\"\\n📊 생성된 데이터:\")\n            \n            # 생성된 데이터 확인\n            team_count = db.query(Team).count()\n            mbti_count = db.query(ModelMBTI).count()\n            preset_count = db.query(StylePreset).count()\n            \n            print(f\"   - 팀: {team_count}개\")\n            print(f\"   - MBTI 유형: {mbti_count}개\")\n            print(f\"   - 스타일 프리셋: {preset_count}개\")\n            \n            return True\n            \n        except IntegrityError as e:\n            db.rollback()\n            print(f\"❌ 데이터 무결성 오류: {e}\")\n            print(\"   중복된 데이터가 있거나 제약조건 위반이 발생했습니다.\")\n            return False\n        except Exception as e:\n            db.rollback()\n            print(f\"❌ 예상치 못한 오류: {e}\")\n            import traceback\n            traceback.print_exc()\n            return False\n        finally:\n            db.close()\n    \n    def main():\n        \"\"\"메인 실행 함수\"\"\"\n        print(\"=\"*50)\n        print(\"🌱 AIMEX 시드 데이터 생성기\")\n        print(\"=\"*50)\n        \n        success = create_seed_data()\n        \n        if success:\n            print(\"\\n✅ 시드 데이터 생성이 성공적으로 완료되었습니다!\")\n            print(\"\\n🚀 이제 서버를 실행할 수 있습니다:\")\n            print(\"   cd backend && python run.py\")\n        else:\n            print(\"\\n❌ 시드 데이터 생성에 실패했습니다.\")\n            print(\"\\n🔧 해결방법:\")\n            print(\"   1. 데이터베이스 서버 실행 상태 확인\")\n            print(\"   2. 데이터베이스 연결 정보 확인\")\n            print(\"   3. 테이블이 생성되어 있는지 확인\")\n            return 1\n        \n        return 0\n    \n    if __name__ == \"__main__\":\n        exit(main())\n        \nexcept ImportError as e:\n    print(f\"❌ 모듈 임포트 오류: {e}\")\n    print(\"\\n해결방법:\")\n    print(\"1. 가상환경이 활성화되어 있는지 확인\")\n    print(\"2. 의존성 패키지 설치: pip install -r backend/requirements.txt\")\n    print(\"3. PYTHONPATH 설정 확인\")\nexcept Exception as e:\n    print(f\"❌ 예상치 못한 오류: {e}\")\n    import traceback\n    traceback.print_exc()\n