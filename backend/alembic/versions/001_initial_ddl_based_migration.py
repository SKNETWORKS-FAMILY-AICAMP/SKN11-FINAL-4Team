"""Initial DDL-based migration

Revision ID: 001
Revises:
Create Date: 2025-01-27 10:00:00.000000

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = "001"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 1. USER 테이블 생성
    op.create_table(
        "USER",
        sa.Column(
            "user_id",
            sa.String(length=255),
            nullable=False,
            comment="내부 사용자 고유 id",
        ),
        sa.Column(
            "provider_id",
            sa.String(length=255),
            nullable=False,
            comment="소셜 제공자의 고유 사용자 식별자",
        ),
        sa.Column(
            "provider",
            sa.String(length=20),
            nullable=False,
            comment="소셜 로그인 제공자",
        ),
        sa.Column(
            "user_name", sa.String(length=20), nullable=False, comment="사용자 이름"
        ),
        sa.Column(
            "email", sa.String(length=50), nullable=False, comment="사용자 이메일"
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="사용자가 처음 가입한 시각",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="사용자의 정보가 마지막으로 수정된 시각",
        ),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("provider_id"),
        sa.UniqueConstraint("user_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="사용자 정보 테이블",
    )

    # 2. GROUP 테이블 생성
    op.create_table(
        "GROUP",
        sa.Column("group_id", sa.Integer(), nullable=False, comment="그룹 고유 식별자"),
        sa.Column(
            "group_name", sa.String(length=100), nullable=False, comment="그룹명"
        ),
        sa.Column("group_description", sa.Text(), nullable=True, comment="그룹 설명"),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="그룹 생성 시각",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="그룹 정보 마지막 수정 시각",
        ),
        sa.PrimaryKeyConstraint("group_id"),
        sa.UniqueConstraint("group_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="사용자 그룹, 관리자 그룹 데이터",
    )

    # 3. USER_GROUP 테이블 생성
    op.create_table(
        "USER_GROUP",
        sa.Column(
            "user_id",
            sa.String(length=255),
            nullable=False,
            comment="내부 사용자 고유 식별자",
        ),
        sa.Column("group_id", sa.Integer(), nullable=False, comment="그룹 고유 식별자"),
        sa.ForeignKeyConstraint(
            ["group_id"], ["GROUP.group_id"], ondelete="CASCADE", onupdate="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["USER.user_id"], ondelete="CASCADE", onupdate="CASCADE"
        ),
        sa.PrimaryKeyConstraint("user_id", "group_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="유저, 그룹 교차 테이블",
    )

    # 4. SYSTEM_LOG 테이블 생성
    op.create_table(
        "SYSTEM_LOG",
        sa.Column(
            "log_id", sa.String(length=255), nullable=False, comment="로그 고유 식별자"
        ),
        sa.Column(
            "user_id",
            sa.String(length=255),
            nullable=False,
            comment="내부 사용자 고유 식별자",
        ),
        sa.Column(
            "log_type",
            sa.SmallInteger(),
            nullable=False,
            comment="0: API요청, 1: 시스템오류, 2: 인증관련",
        ),
        sa.Column(
            "log_content",
            sa.Text(),
            nullable=False,
            comment="API 요청 내용, 오류 메시지 등 상세한 로그 내용, JSON 형식으로 저장",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="로그 생성일",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["USER.user_id"], ondelete="CASCADE", onupdate="CASCADE"
        ),
        sa.PrimaryKeyConstraint("log_id"),
        sa.UniqueConstraint("log_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="각종 시스템 로그 데이터",
    )

    # 5. HF_TOKEN_MANAGE 테이블 생성
    op.create_table(
        "HF_TOKEN_MANAGE",
        sa.Column(
            "hf_manage_id",
            sa.String(length=255),
            nullable=False,
            comment="허깅페이스 토큰 관리 고유 식별자",
        ),
        sa.Column("group_id", sa.Integer(), nullable=False, comment="그룹 고유 식별자"),
        sa.Column(
            "hf_token_value",
            sa.Text(),
            nullable=False,
            comment="허깅페이스 실제 토큰 값 (암호화)",
        ),
        sa.Column(
            "hf_token_nickname",
            sa.String(length=100),
            nullable=False,
            comment="사용자에게 보여지는 허깅페이스 토큰 별칭",
        ),
        sa.Column(
            "hf_user_name",
            sa.String(length=50),
            nullable=False,
            comment="허깅페이스 계정 사용자 이름",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="허깅페이스 토큰 생성 시각",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="허깅페이스 토큰 마지막 수정 시각",
        ),
        sa.ForeignKeyConstraint(
            ["group_id"], ["GROUP.group_id"], ondelete="CASCADE", onupdate="CASCADE"
        ),
        sa.PrimaryKeyConstraint("hf_manage_id"),
        sa.UniqueConstraint("hf_manage_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="그룹이 사용할 허깅페이스 토큰 데이터",
    )

    # 6. MODEL_MBTI 테이블 생성
    op.create_table(
        "MODEL_MBTI",
        sa.Column(
            "mbti_id", sa.Integer(), nullable=False, comment="MBTI 성격 고유 식별자"
        ),
        sa.Column(
            "mbti_name", sa.String(length=100), nullable=False, comment="MBTI 이름"
        ),
        sa.Column(
            "mbti_chara",
            sa.String(length=255),
            nullable=False,
            comment="MBTI 별 성격, 특성",
        ),
        sa.Column("mbti_speech", sa.Text(), nullable=False, comment="MBTI 말투 설명"),
        sa.PrimaryKeyConstraint("mbti_id"),
        sa.UniqueConstraint("mbti_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="AI 인플루언서 예시 성격 MBTI",
    )

    # 7. STYLE_PRESET 테이블 생성
    op.create_table(
        "STYLE_PRESET",
        sa.Column(
            "style_preset_id",
            sa.String(length=255),
            nullable=False,
            comment="스타일 프리셋 고유 식별자",
        ),
        sa.Column(
            "style_preset_name",
            sa.String(length=100),
            nullable=False,
            comment="스타일 프리셋 이름",
        ),
        sa.Column(
            "influencer_type",
            sa.SmallInteger(),
            nullable=False,
            comment="인플루언서 유형",
        ),
        sa.Column(
            "influencer_gender",
            sa.SmallInteger(),
            nullable=False,
            comment="인플루언서 성별, 0:남성, 1:여성, 2:없음",
        ),
        sa.Column(
            "influencer_age_group",
            sa.SmallInteger(),
            nullable=False,
            comment="인플루언서 연령대, (20대,30대, ...)",
        ),
        sa.Column(
            "influencer_hairstyle",
            sa.String(length=100),
            nullable=False,
            comment="인플루언서 헤어 스타일",
        ),
        sa.Column(
            "influencer_style",
            sa.String(length=255),
            nullable=False,
            comment="인플루언서 전체 스타일(힙함, 청순 등)",
        ),
        sa.Column(
            "influencer_personality",
            sa.Text(),
            nullable=False,
            comment="인플루언서 성격",
        ),
        sa.Column(
            "influencer_speech", sa.Text(), nullable=False, comment="인플루언서 말투"
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="인플루언서 특징 생성 시각",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="인플루언서 특징 수정 시각",
        ),
        sa.PrimaryKeyConstraint("style_preset_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="AI 인플루언서 설정에서 입력하는 폼 항목 또는 공유 할 수 있는 프리셋",
    )

    # 8. AI_INFLUENCER 테이블 생성
    op.create_table(
        "AI_INFLUENCER",
        sa.Column(
            "influencer_id",
            sa.String(length=255),
            nullable=False,
            comment="인플루언서 고유 식별자",
        ),
        sa.Column(
            "user_id",
            sa.String(length=255),
            nullable=False,
            comment="내부 사용자 고유 식별자",
        ),
        sa.Column("group_id", sa.Integer(), nullable=False, comment="그룹 고유 식별자"),
        sa.Column(
            "style_preset_id",
            sa.String(length=255),
            nullable=False,
            comment="스타일 프리셋 고유 식별자",
        ),
        sa.Column(
            "mbti_id", sa.Integer(), nullable=True, comment="MBTI 성격 고유 식별자"
        ),
        sa.Column(
            "influencer_name",
            sa.String(length=100),
            nullable=False,
            comment="AI 인플루언서 이름",
        ),
        sa.Column(
            "image_url",
            sa.Text(),
            nullable=True,
            comment="인플루언서 이미지를 받아오면 그대로 사용, 없다면 정보를 기반으로 만들어서 사용",
        ),
        sa.Column(
            "influencer_data_url",
            sa.String(length=255),
            nullable=True,
            comment="인플루언서 학습 데이터셋 URL 경로",
        ),
        sa.Column(
            "learning_status",
            sa.SmallInteger(),
            nullable=False,
            comment="인플루언서 학습 상태, 0: 학습 중, 1: 사용가능",
        ),
        sa.Column(
            "influencer_model_repo",
            sa.String(length=255),
            nullable=False,
            comment="허깅페이스 repo URL 경로",
        ),
        sa.Column(
            "chatbot_option", sa.Boolean(), nullable=False, comment="챗봇 생성 여부"
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="인플루언서 생성시점",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="인플루언서 마지막 수정일",
        ),
        sa.ForeignKeyConstraint(
            ["mbti_id"], ["MODEL_MBTI.mbti_id"], ondelete="CASCADE", onupdate="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["style_preset_id"],
            ["STYLE_PRESET.style_preset_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id", "group_id"],
            ["USER_GROUP.user_id", "USER_GROUP.group_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.PrimaryKeyConstraint("influencer_id", "user_id", "group_id"),
        sa.UniqueConstraint("influencer_id"),
        sa.UniqueConstraint("influencer_name"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="사용자 학습 AI 인플로언서 모델",
    )

    # 9. BATCH_KEY 테이블 생성
    op.create_table(
        "BATCH_KEY",
        sa.Column(
            "batch_key_id",
            sa.String(length=255),
            nullable=False,
            comment="배치키 고유 식별자",
        ),
        sa.Column(
            "influencer_id",
            sa.String(length=255),
            nullable=False,
            comment="인플루언서 고유 식별자",
        ),
        sa.Column(
            "batch_key", sa.String(length=255), nullable=False, comment="배치키 값"
        ),
        sa.ForeignKeyConstraint(
            ["influencer_id"],
            ["AI_INFLUENCER.influencer_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.PrimaryKeyConstraint("batch_key_id"),
        sa.UniqueConstraint("batch_key_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="AI 인플루언서 데이터 셋 생성 ~ 학습까지 작업이 완료되었는지 확인시 보내는 요청 배치키",
    )

    # 10. CHAT_MESSAGE 테이블 생성
    op.create_table(
        "CHAT_MESSAGE",
        sa.Column(
            "session_id", sa.Integer(), nullable=False, comment="대화 세션 고유 식별자"
        ),
        sa.Column(
            "influencer_id",
            sa.String(length=255),
            nullable=False,
            comment="인플루언서 고유 식별자",
        ),
        sa.Column(
            "message_content",
            sa.Text(),
            nullable=False,
            comment="총 대화 내용, JSON 형식으로 저장",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="대화 시작 시각",
        ),
        sa.Column("end_at", sa.TIMESTAMP(), nullable=False, comment="대화 종료 시각"),
        sa.ForeignKeyConstraint(
            ["influencer_id"],
            ["AI_INFLUENCER.influencer_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.PrimaryKeyConstraint("session_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="만들어진 모델과 챗봇 대화 기록을 저장하는 테이블",
    )

    # 11. INFLUENCER_API 테이블 생성
    op.create_table(
        "INFLUENCER_API",
        sa.Column(
            "api_id", sa.String(length=255), nullable=False, comment="API 고유 식별자"
        ),
        sa.Column(
            "influencer_id",
            sa.String(length=255),
            nullable=False,
            comment="모델 고유 식별자",
        ),
        sa.Column(
            "api_value", sa.String(length=255), nullable=False, comment="발급된 API 값"
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="API 최초 생성 시각",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="API 발급정보 마지막 수정 일시",
        ),
        sa.ForeignKeyConstraint(
            ["influencer_id"],
            ["AI_INFLUENCER.influencer_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.PrimaryKeyConstraint("api_id", "influencer_id"),
        sa.UniqueConstraint("api_id"),
        sa.UniqueConstraint("api_value"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="AI 인플루언서 대화 API 키 관리",
    )

    # 12. API_CALL_AGGREGATION 테이블 생성
    op.create_table(
        "API_CALL_AGGREGATION",
        sa.Column(
            "api_call_id",
            sa.String(length=255),
            nullable=False,
            comment="API호출 집계 고유 식별자",
        ),
        sa.Column(
            "api_id", sa.String(length=255), nullable=False, comment="API 고유 식별자"
        ),
        sa.Column(
            "influencer_id",
            sa.String(length=255),
            nullable=False,
            comment="모델 고유 식별자",
        ),
        sa.Column(
            "daily_call_count",
            sa.Integer(),
            nullable=False,
            server_default="0",
            comment="일일 API 호출 횟수",
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="일일 API 집계 데이터 생성일",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="일일 API 집계 데이터 수정일",
        ),
        sa.ForeignKeyConstraint(
            ["api_id", "influencer_id"],
            ["INFLUENCER_API.api_id", "INFLUENCER_API.influencer_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.PrimaryKeyConstraint("api_call_id", "api_id", "influencer_id"),
        sa.UniqueConstraint("api_call_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="API 호출에 대해서 집계하여 저장하는 데이터",
    )

    # 13. BOARD 테이블 생성
    op.create_table(
        "BOARD",
        sa.Column(
            "board_id",
            sa.String(length=255),
            nullable=False,
            comment="게시물 고유 식별자",
        ),
        sa.Column(
            "influencer_id",
            sa.String(length=255),
            nullable=False,
            comment="인플루언서 고유 식별자",
        ),
        sa.Column(
            "user_id",
            sa.String(length=255),
            nullable=False,
            comment="내부 사용자 고유 식별자",
        ),
        sa.Column("group_id", sa.Integer(), nullable=False, comment="그룹 고유 식별자"),
        sa.Column(
            "board_topic",
            sa.String(length=255),
            nullable=False,
            comment="게시글의 주제 또는 카테고리명",
        ),
        sa.Column(
            "board_description", sa.Text(), nullable=True, comment="게시글의 상세 설명"
        ),
        sa.Column(
            "board_platform",
            sa.SmallInteger(),
            nullable=False,
            comment="0:인스타그램, 1:블로그, 2:페이스북",
        ),
        sa.Column(
            "board_hash_tag",
            sa.Text(),
            nullable=True,
            comment="해시태그 리스트, JSON 형식으로 저장",
        ),
        sa.Column(
            "board_status",
            sa.SmallInteger(),
            nullable=False,
            server_default="0",
            comment="0:최초생성, 1:임시저장, 2:예약, 3:발행됨",
        ),
        sa.Column(
            "image_url",
            sa.Text(),
            nullable=False,
            comment="게시글 썸네일 또는 대표 이미지 URL 경로",
        ),
        sa.Column(
            "reservation_at",
            sa.TIMESTAMP(),
            nullable=True,
            comment="게시글 예약 발행 일시",
        ),
        sa.Column(
            "pulished_at", sa.TIMESTAMP(), nullable=True, comment="게시물 발행 시각"
        ),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP"),
            comment="게시글 생성 시각",
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(),
            nullable=False,
            server_default=sa.text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"),
            comment="게시글 수정 시각",
        ),
        sa.ForeignKeyConstraint(
            ["influencer_id"],
            ["AI_INFLUENCER.influencer_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id", "group_id"],
            ["USER_GROUP.user_id", "USER_GROUP.group_id"],
            ondelete="CASCADE",
            onupdate="CASCADE",
        ),
        sa.PrimaryKeyConstraint("board_id"),
        sa.UniqueConstraint("board_id"),
        mysql_charset="utf8mb4",
        mysql_collate="utf8mb4_unicode_ci",
        comment="AI 인플루언서 작성 게시글 데이터",
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # 테이블 삭제 (역순)
    op.drop_table("BOARD")
    op.drop_table("API_CALL_AGGREGATION")
    op.drop_table("INFLUENCER_API")
    op.drop_table("CHAT_MESSAGE")
    op.drop_table("BATCH_KEY")
    op.drop_table("AI_INFLUENCER")
    op.drop_table("STYLE_PRESET")
    op.drop_table("MODEL_MBTI")
    op.drop_table("HF_TOKEN_MANAGE")
    op.drop_table("SYSTEM_LOG")
    op.drop_table("USER_GROUP")
    op.drop_table("GROUP")
    op.drop_table("USER")

    # ### end Alembic commands ###
