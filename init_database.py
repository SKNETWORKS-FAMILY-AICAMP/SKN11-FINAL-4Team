#!/usr/bin/env python3\n\"\"\"\nAIMEX 데이터베이스 초기화 스크립트\n\nSOLID 원칙:\n- SRP: 데이터베이스 초기화만 담당\n- OCP: 새로운 모델 추가 시 자동으로 테이블 생성\n- DIP: SQLAlchemy 추상화 계층 사용\n\nClean Architecture:\n- Infrastructure Layer: 데이터베이스 엔진 및 세션 관리\n- Domain Layer: 엔티티 모델 정의\n\"\"\"\n\nimport sys\nimport os\nfrom pathlib import Path\n\n# 프로젝트 루트 경로 추가\nproject_root = Path(__file__).parent / \"backend\"\nsys.path.insert(0, str(project_root))\n\ntry:\n    from app.database import engine, test_database_connection\n    from app.models.base import Base\n    # 모든 모델 임포트 (테이블 생성을 위해 필요)\n    from app.models.user import User, Team, HFTokenManage, SystemLog\n    from app.models.influencer import (\n        ModelMBTI, StylePreset, AIInfluencer, \n        BatchKey, ChatMessage, InfluencerAPI, APICallAggregation\n    )\n    from app.models.board import Board\n    \n    def init_database():\n        \"\"\"\n        데이터베이스 초기화\n        \n        Clean Architecture 원칙:\n        - 모든 도메인 모델을 기반으로 테이블 생성\n        - 인프라 계층의 데이터베이스 엔진 사용\n        \"\"\"\n        print(\"🔧 AIMEX 데이터베이스 초기화 시작...\")\n        \n        # 데이터베이스 연결 테스트\n        print(\"\\n1. 데이터베이스 연결 테스트...\")\n        if not test_database_connection():\n            print(\"❌ 데이터베이스 연결 실패\")\n            print(\"\\n해결방법:\")\n            print(\"- MySQL 서버가 실행 중인지 확인\")\n            print(\"- 데이터베이스 연결 정보 확인 (backend/.env)\")\n            print(\"- 네트워크 및 방화벽 설정 확인\")\n            return False\n        \n        print(\"✅ 데이터베이스 연결 성공\")\n        \n        # 테이블 생성\n        print(\"\\n2. 테이블 생성...\")\n        try:\n            # 모든 모델의 테이블 생성\n            Base.metadata.create_all(bind=engine)\n            print(\"✅ 테이블 생성 완료\")\n            \n            # 생성된 테이블 목록 확인\n            print(\"\\n📋 생성된 테이블 목록:\")\n            table_names = [\n                \"USER\", \"TEAM\", \"USER-TEAM\", \"HF_TOKEN_MANAGE\", \"SYSTEM_LOG\",\n                \"INFLUENCER_MBTI\", \"PRESET\", \"AI_INFLUENCER\", \"BATCH_KEY\",\n                \"CHAT_MESSAGE\", \"INFLUENCER_API\", \"API_CALL_AGGREGATION\", \"BOARD\"\n            ]\n            \n            for table_name in table_names:\n                print(f\"   ✅ {table_name}\")\n            \n            return True\n            \n        except Exception as e:\n            print(f\"❌ 테이블 생성 실패: {e}\")\n            print(\"\\n가능한 원인:\")\n            print(\"- 테이블이 이미 존재하고 스키마가 다름\")\n            print(\"- 데이터베이스 권한 부족\")\n            print(\"- 외래키 제약조건 오류\")\n            import traceback\n            traceback.print_exc()\n            return False\n    \n    def drop_all_tables():\n        \"\"\"\n        모든 테이블 삭제 (주의: 데이터 손실 발생)\n        \n        개발 환경에서만 사용할 것을 권장\n        \"\"\"\n        print(\"⚠️  모든 테이블 삭제...\")\n        try:\n            Base.metadata.drop_all(bind=engine)\n            print(\"✅ 모든 테이블 삭제 완료\")\n            return True\n        except Exception as e:\n            print(f\"❌ 테이블 삭제 실패: {e}\")\n            return False\n    \n    def reset_database():\n        \"\"\"\n        데이터베이스 완전 초기화 (삭제 후 재생성)\n        \n        주의: 모든 데이터가 삭제됩니다!\n        \"\"\"\n        print(\"🔄 데이터베이스 완전 초기화...\")\n        \n        # 사용자 확인\n        confirm = input(\"⚠️  모든 데이터가 삭제됩니다. 계속하시겠습니까? (yes/no): \")\n        if confirm.lower() not in ['yes', 'y']:\n            print(\"❌ 작업이 취소되었습니다.\")\n            return False\n        \n        # 테이블 삭제 후 재생성\n        if drop_all_tables() and init_database():\n            print(\"🎉 데이터베이스 초기화 완료!\")\n            return True\n        else:\n            print(\"❌ 데이터베이스 초기화 실패\")\n            return False\n    \n    def check_tables():\n        \"\"\"\n        현재 테이블 상태 확인\n        \"\"\"\n        print(\"📊 테이블 상태 확인...\")\n        \n        try:\n            from sqlalchemy import inspect\n            inspector = inspect(engine)\n            existing_tables = inspector.get_table_names()\n            \n            expected_tables = [\n                \"USER\", \"TEAM\", \"USER-TEAM\", \"HF_TOKEN_MANAGE\", \"SYSTEM_LOG\",\n                \"INFLUENCER_MBTI\", \"PRESET\", \"AI_INFLUENCER\", \"BATCH_KEY\",\n                \"CHAT_MESSAGE\", \"INFLUENCER_API\", \"API_CALL_AGGREGATION\", \"BOARD\"\n            ]\n            \n            print(f\"\\n현재 존재하는 테이블: {len(existing_tables)}개\")\n            for table in existing_tables:\n                status = \"✅\" if table in expected_tables else \"⚠️ \"\n                print(f\"   {status} {table}\")\n            \n            missing_tables = [t for t in expected_tables if t not in existing_tables]\n            if missing_tables:\n                print(f\"\\n누락된 테이블: {len(missing_tables)}개\")\n                for table in missing_tables:\n                    print(f\"   ❌ {table}\")\n            else:\n                print(\"\\n✅ 모든 예상 테이블이 존재합니다.\")\n            \n            return len(missing_tables) == 0\n            \n        except Exception as e:\n            print(f\"❌ 테이블 상태 확인 실패: {e}\")\n            return False\n    \n    def main():\n        \"\"\"메인 실행 함수\"\"\"\n        print(\"=\"*60)\n        print(\"🗃️  AIMEX 데이터베이스 초기화 도구\")\n        print(\"=\"*60)\n        \n        print(\"\\n선택할 작업을 입력하세요:\")\n        print(\"1. 테이블 생성 (init)\")\n        print(\"2. 테이블 상태 확인 (check)\")\n        print(\"3. 데이터베이스 완전 초기화 (reset)\")\n        print(\"4. 종료 (exit)\")\n        \n        while True:\n            choice = input(\"\\n작업 선택 (1-4): \").strip()\n            \n            if choice == '1' or choice.lower() == 'init':\n                success = init_database()\n                if success:\n                    print(\"\\n🎉 테이블 생성이 완료되었습니다!\")\n                    print(\"\\n📋 다음 단계:\")\n                    print(\"   1. 시드 데이터 생성: python create_seed_data.py\")\n                    print(\"   2. 서버 실행: cd backend && python run.py\")\n                break\n                \n            elif choice == '2' or choice.lower() == 'check':\n                check_tables()\n                break\n                \n            elif choice == '3' or choice.lower() == 'reset':\n                success = reset_database()\n                if success:\n                    print(\"\\n🎉 데이터베이스 초기화가 완료되었습니다!\")\n                    print(\"\\n📋 다음 단계:\")\n                    print(\"   1. 시드 데이터 생성: python create_seed_data.py\")\n                    print(\"   2. 서버 실행: cd backend && python run.py\")\n                break\n                \n            elif choice == '4' or choice.lower() == 'exit':\n                print(\"👋 프로그램을 종료합니다.\")\n                break\n                \n            else:\n                print(\"❌ 잘못된 선택입니다. 1-4 중에서 선택하세요.\")\n        \n        return 0\n    \n    if __name__ == \"__main__\":\n        # 명령행 인수가 있는 경우 직접 실행\n        if len(sys.argv) > 1:\n            command = sys.argv[1].lower()\n            if command == 'init':\n                init_database()\n            elif command == 'check':\n                check_tables()\n            elif command == 'reset':\n                reset_database()\n            else:\n                print(f\"❌ 알 수 없는 명령어: {command}\")\n                print(\"사용법: python init_database.py [init|check|reset]\")\n        else:\n            # 대화형 모드\n            exit(main())\n        \nexcept ImportError as e:\n    print(f\"❌ 모듈 임포트 오류: {e}\")\n    print(\"\\n해결방법:\")\n    print(\"1. 가상환경이 활성화되어 있는지 확인\")\n    print(\"2. 의존성 패키지 설치: pip install -r backend/requirements.txt\")\n    print(\"3. PYTHONPATH 설정 확인\")\nexcept Exception as e:\n    print(f\"❌ 예상치 못한 오류: {e}\")\n    import traceback\n    traceback.print_exc()\n